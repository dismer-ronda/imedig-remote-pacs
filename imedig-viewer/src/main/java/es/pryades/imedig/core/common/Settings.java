package es.pryades.imedig.core.common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.Properties;

import org.apache.log4j.Logger;

import es.pryades.imedig.cloud.common.ImedigException;

/**
 * @author Dismer Ronda Betancourt (dismer.ronda@pryades.com)
 * @version 
 * @since Jul, 2010
 */
public class Settings 
{
    private static final Logger LOG = Logger.getLogger( Settings.class );

	public static final String TrustKey = "im3d1gcl0ud25887";

	public static String IMEDIG_Auth;

	public static String IMEDIG_RootDir;
	//public static String IMEDIG_Serial;
	public static String IMEDIG_AETitle;
	public static String IMEDIG_Port;

	public static String ConfigPassword;
	public static String Languages;
	public static String Cache_Dir;
	public static String License;

	//public static String CLOUD_Url;
	public static Long Cache_TTL; 
	public static Long Cache_MaxSize; 
	public static Long Cache_CheckPeriod; 

	public static String PACS_AETitle;
	public static String PACS_Host;
	public static Integer PACS_Port;
	
	/*public static String GPRS_APN;
	public static String GPRS_PHONE;
	public static String GPRS_USER;
	public static String GPRS_PASSWORD;*/

	public static Settings instance = null;
	
    Boolean lock = Boolean.FALSE;
    
    private Properties settings;
    
	private Settings()
	{
		super();
	}
	
	static public void Init() throws ImedigException
	{
		instance = new Settings();
	
		instance.loadSettingsFromFile( "imedig.properties" );
	}
	
	static public Settings getInstance()
	{
		return instance;
	}
	
	private void loadSettingsFromFile( String fileName ) throws ImedigException 
	{
		synchronized ( lock )
		{
			settings = new Properties();

			URL url = Thread.currentThread().getContextClassLoader().getResource( fileName );
			
	        if ( url == null )
	        	throw new ImedigException( new Exception( "Settings file " + fileName + " was not found in the classpath" ), LOG, ImedigException.FILE_NOT_FOUND );
	
	        try 
	        {
				settings.load( new FileInputStream( url.getPath() ) );
			} 
	        catch ( Throwable e ) 
	        {
	        	throw new ImedigException( new Exception( "Settings file " + fileName + " was not found in the classpath" ), LOG, ImedigException.FILE_NOT_FOUND );
			}

	        IMEDIG_RootDir =  new File( url.getPath().replace( "imedig.properties", "" ) ).getParent();
	        
	        LOG.info( "Settings read successfully from " + url.getPath() );
	        LOG.info( "Settings " + settings.toString() );
	        
	        LOG.info( "IMEDIG_RootDir set to " + IMEDIG_RootDir );

	        initSettings();
		}
	}
	
	private void initSettings() throws ImedigException
	{
    	License = getSetting( "License", "" );

    	ConfigPassword = getSetting( "ConfigPassword", "63a9f0ea7bb98050796b649e85481845" );

    	IMEDIG_Auth = getSetting( "IMEDIG_Auth", "true" );
    	//IMEDIG_Serial = getSetting( "IMEDIG_Serial", "IMEDIG001" );
    	IMEDIG_AETitle = getSetting( "IMEDIG_AETitle", "IMEDIG" );
    	IMEDIG_Port = getSetting( "IMEDIG_Port", "8080" );

    	Languages = getSetting( "Languages", "es" );
		//CLOUD_Url = getSetting( "CLOUD_Url", "http://www.imedig.com" );
    	Cache_TTL = Long.parseLong( getSetting( "Cache_TTL", "60" ) ); 
    	Cache_MaxSize = Long.parseLong( getSetting( "Cache_MaxSize", "1024" ) );
    	Cache_CheckPeriod = Long.parseLong( getSetting( "Cache_CheckPeriod", "60" ) ); 
    	Cache_Dir = IMEDIG_RootDir + "/cache"; 
       	
    	PACS_AETitle = getSetting( "PACS_AETitle", "IMEDIG" );
    	PACS_Host = getSetting( "PACS_Host", "localhost" );
    	PACS_Port = Integer.parseInt( getSetting( "PACS_Port", "11112" ) );
	}

	public static String getSetting( String name, String defValue )
	{
		synchronized ( getInstance().lock )
		{
			if ( getInstance().settings == null )
				return defValue;
			
			String value = getInstance().settings.getProperty( name, defValue );
			
			if ( value == null )
				return defValue;
			
			return value.trim();
		}
	}

	private static void writeComment( FileOutputStream os, String comment ) throws IOException
	{
		os.write( ("# " + "\n").getBytes() ); 
		os.write( ("# " + comment + "\n").getBytes() ); 
		os.write( ("# " + "\n").getBytes() ); 
	}

	private static void writeLn( FileOutputStream os, String text ) throws IOException
	{
		os.write( (text + "\n").getBytes() ); 
	}

	public static void saveSettings() throws ImedigException
	{
		FileOutputStream os = null;
		
		try 
		{
			os = new FileOutputStream( Settings.IMEDIG_RootDir + "/conf/imedig.properties" );
			
			writeComment( os, "Automatically generated by IMEDIG" );
			writeLn( os, "" );
	       	
			writeLn( os, "IMEDIG_Auth = " + IMEDIG_Auth );
			writeLn( os, "IMEDIG_AETitle = " + IMEDIG_AETitle );
			//writeLn( os, "IMEDIG_Serial = " + IMEDIG_Serial );
			writeLn( os, "IMEDIG_Port = " + IMEDIG_Port );
			writeLn( os, "ConfigPassword = " + ConfigPassword );
			writeLn( os, "License = " + License );
			writeLn( os, "Languages = " + Languages );
			//writeLn( os, "CLOUD_Url = " + CLOUD_Url );
			writeLn( os, "Cache_TTL = " + Cache_TTL ); 
			writeLn( os, "Cache_MaxSize = " + Cache_MaxSize );
			writeLn( os, "Cache_CheckPeriod = " + Cache_CheckPeriod ); 
			writeLn( os, "" );

			writeLn( os, "PACS_AETitle = " + PACS_AETitle );
			writeLn( os, "PACS_Host = " + PACS_Host );
			writeLn( os, "PACS_Port = " + Integer.toString( PACS_Port ) );
			writeLn( os, "" );

			/*writeLn( os, "GPRS_APN = " + GPRS_APN );
			writeLn( os, "GPRS_PHONE = " + GPRS_PHONE );
			writeLn( os, "GPRS_USER = " + GPRS_USER );
			writeLn( os, "GPRS_PASSWORD = " + GPRS_PASSWORD );
			writeLn( os, "" );*/
		}
		catch ( Throwable e )
		{
			throw new ImedigException( e, LOG, ImedigException.IO_ERROR );
		}
		finally 
		{
			if ( os != null )
			{
				try
				{
					os.close();
				}
				catch ( IOException e )
				{
					throw new ImedigException( e, LOG, ImedigException.IO_ERROR );
				}
			}
		}
	}
	
}
